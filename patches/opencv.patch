--- catkin_ws/src/opencv3/CMakeLists.txt
+++ catkin_ws/src/opencv3/CMakeLists.txt
@@ -269,10 +269,10 @@ OCV_OPTION(WITH_ITT            "Include Intel ITT support"                   ON
 OCV_OPTION(BUILD_SHARED_LIBS        "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)" NOT (ANDROID OR APPLE_FRAMEWORK) )
 OCV_OPTION(BUILD_opencv_apps        "Build utility applications (used for example to train classifiers)" (NOT ANDROID AND NOT WINRT) IF (NOT APPLE_FRAMEWORK) )
 OCV_OPTION(BUILD_opencv_js          "Build JavaScript bindings by Emscripten" OFF )
-OCV_OPTION(BUILD_ANDROID_EXAMPLES   "Build examples for Android platform"         ON  IF ANDROID )
-OCV_OPTION(BUILD_DOCS               "Create build rules for OpenCV Documentation" ON  IF (NOT WINRT AND NOT APPLE_FRAMEWORK))
-OCV_OPTION(BUILD_EXAMPLES           "Build all examples"                          OFF )
-OCV_OPTION(BUILD_PACKAGE            "Enables 'make package_source' command"       ON  IF NOT WINRT)
+OCV_OPTION(BUILD_ANDROID_EXAMPLES   "Build examples for Android platform"         OFF)
+OCV_OPTION(BUILD_DOCS               "Create build rules for OpenCV Documentation" OFF)
+OCV_OPTION(BUILD_EXAMPLES           "Build all examples"                          OFF)
+OCV_OPTION(BUILD_PACKAGE            "Enables 'make package_source' command"       OFF)
 OCV_OPTION(BUILD_PERF_TESTS         "Build performance tests"                     OFF)
 OCV_OPTION(BUILD_TESTS              "Build accuracy & regression tests"           OFF)
 OCV_OPTION(BUILD_WITH_DEBUG_INFO    "Include debug info into debug libs (not MSCV only)" ON )
@@ -361,19 +361,19 @@ if(WIN32 AND CMAKE_HOST_SYSTEM_NAME MATCHES Windows)
     ocv_update(OpenCV_INSTALL_BINARIES_PREFIX "")
   endif()
 elseif(ANDROID)
-  ocv_update(OpenCV_INSTALL_BINARIES_PREFIX "sdk/native/")
+  ocv_update(OpenCV_INSTALL_BINARIES_PREFIX "")
 else()
   ocv_update(OpenCV_INSTALL_BINARIES_PREFIX "")
 endif()
 
 if(ANDROID)
-  ocv_update(OPENCV_SAMPLES_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}samples/${ANDROID_NDK_ABI_NAME}")
+  ocv_update(OPENCV_SAMPLES_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}samples")
 else()
   ocv_update(OPENCV_SAMPLES_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}samples")
 endif()
 
 if(ANDROID)
-  ocv_update(OPENCV_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}bin/${ANDROID_NDK_ABI_NAME}")
+  ocv_update(OPENCV_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}bin")
 else()
   ocv_update(OPENCV_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}bin")
 endif()
@@ -395,14 +395,14 @@ else()
 endif()
 
 if(ANDROID)
-  set(LIBRARY_OUTPUT_PATH                "${OpenCV_BINARY_DIR}/lib/${ANDROID_NDK_ABI_NAME}")
-  ocv_update(3P_LIBRARY_OUTPUT_PATH      "${OpenCV_BINARY_DIR}/3rdparty/lib/${ANDROID_NDK_ABI_NAME}")
-  ocv_update(OPENCV_LIB_INSTALL_PATH     sdk/native/libs/${ANDROID_NDK_ABI_NAME})
-  ocv_update(OPENCV_3P_LIB_INSTALL_PATH  sdk/native/3rdparty/libs/${ANDROID_NDK_ABI_NAME})
-  ocv_update(OPENCV_CONFIG_INSTALL_PATH  sdk/native/jni)
-  ocv_update(OPENCV_INCLUDE_INSTALL_PATH sdk/native/jni/include)
-  ocv_update(OPENCV_SAMPLES_SRC_INSTALL_PATH samples/native)
-  ocv_update(OPENCV_OTHER_INSTALL_PATH   sdk/etc)
+  set(LIBRARY_OUTPUT_PATH                "${OpenCV_BINARY_DIR}/lib")
+  ocv_update(3P_LIBRARY_OUTPUT_PATH      "${OpenCV_BINARY_DIR}/3rdparty/lib")
+  ocv_update(OPENCV_LIB_INSTALL_PATH     "lib")
+  ocv_update(OPENCV_3P_LIB_INSTALL_PATH  "share/OpenCV/3rdparty/${OPENCV_LIB_INSTALL_PATH}")
+  ocv_update(OPENCV_CONFIG_INSTALL_PATH  "share/OpenCV")
+  ocv_update(OPENCV_INCLUDE_INSTALL_PATH "include")
+  ocv_update(OPENCV_SAMPLES_SRC_INSTALL_PATH "share/OpenCV/samples")
+  ocv_update(OPENCV_OTHER_INSTALL_PATH   "share/OpenCV")
 else()
   set(LIBRARY_OUTPUT_PATH                "${OpenCV_BINARY_DIR}/lib")
   ocv_update(3P_LIBRARY_OUTPUT_PATH      "${OpenCV_BINARY_DIR}/3rdparty/lib${LIB_SUFFIX}")
@@ -631,12 +631,7 @@ if(ENABLE_PYLINT)
   include(cmake/OpenCVPylint.cmake)
 endif()
 
-
-if(ANDROID AND ANDROID_EXECUTABLE AND ANT_EXECUTABLE AND (ANT_VERSION VERSION_GREATER 1.7) AND (ANDROID_TOOLS_Pkg_Revision GREATER 13))
-  SET(CAN_BUILD_ANDROID_PROJECTS TRUE)
-else()
-  SET(CAN_BUILD_ANDROID_PROJECTS FALSE)
-endif()
+SET(CAN_BUILD_ANDROID_PROJECTS FALSE)
 
 # --- OpenCL ---
 if(WITH_OPENCL)
@@ -784,9 +779,9 @@ if(BUILD_opencv_apps)
   add_subdirectory(apps)
 endif()
 
-if(ANDROID)
-  add_subdirectory(platforms/android/service)
-endif()
+# if(ANDROID)
+#   add_subdirectory(platforms/android/service)
+# endif()
 
 # ----------------------------------------------------------------------------
 # Finalization: generate configuration-based files
@@ -850,11 +845,11 @@
 if(ANDROID OR NOT UNIX)
   install(FILES ${OPENCV_LICENSE_FILE}
         PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
-        DESTINATION ./ COMPONENT libs)
+        DESTINATION ${OPENCV_OTHER_INSTALL_PATH} COMPONENT libs)
   if(OPENCV_README_FILE)
     install(FILES ${OPENCV_README_FILE}
             PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
-            DESTINATION ./ COMPONENT libs)
+            DESTINATION ${OPENCV_OTHER_INSTALL_PATH} COMPONENT libs)
   endif()
 endif()

--- catkin_ws/src/opencv3/3rdparty/libtiff/CMakeLists.txt
+++ catkin_ws/src/opencv3/3rdparty/libtiff/CMakeLists.txt
@@ -7,6 +7,7 @@
 include(CheckCSourceCompiles)
 include(CheckFunctionExists)
 include(CheckIncludeFile)
+include(CheckTypeSize)


 # Find libm, if available

--- catkin_ws/src/opencv3/opencv_contrib/stereo/src/descriptor.cpp	2018-03-15 09:02:28.000000000 +0800
+++ catkin_ws/src/opencv3/opencv_contrib/stereo/src/descriptor.cpp	2023-08-15 18:26:25.771331899 +0800
@@ -226,8 +226,8 @@
         //integral image computation used in the Mean Variation Census Transform
         void imageMeanKernelSize(const Mat &image, int windowSize, Mat &cost)
         {
-            CV_Assert(image.size > 0);
-            CV_Assert(cost.size > 0);
+           // CV_Assert(image.size > 0);
+           // CV_Assert(cost.size > 0);
             CV_Assert(windowSize % 2 != 0);
             int win = windowSize / 2;
             float scalling = ((float) 1) / (windowSize * windowSize);
