--- libs/pcl/CMakeLists.txt
+++ libs/pcl/CMakeLists.txt
@@ -1,6 +1,8 @@
 ### ---[ PCL global CMake
 cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
 
+include(android_pcl_config_minimal.cmake)
+
 if(POLICY CMP0017)
   # Do not include files in CMAKE_MODULE_PATH from files
   # in CMake module directory. Fix MXE build
diff --git a/android_pcl_config_minimal.cmake b/android_pcl_config_minimal.cmake
new file mode 100644
index 0000000..be84634
--- /dev/null
+++ libs/pcl/android_pcl_config_minimal.cmake
@@ -0,0 +1,15 @@
+set(WITH_FZAPI FALSE CACHE BOOL "fzapi: disabled (forced)" FORCE)
+set(WITH_LIBUSB FALSE CACHE BOOL "libusb: disabled (forced)" FORCE)
+set(WITH_OPENGL FALSE CACHE BOOL "qt: disabled (forced)" FORCE)
+set(WITH_OPENNI FALSE CACHE BOOL "openni: disabled (forced)" FORCE)
+set(WITH_OPENNI2 FALSE CACHE BOOL "openni2: disabled (forced)" FORCE)
+set(WITH_PCAP FALSE CACHE BOOL "pcap: disabled (forced)" FORCE)
+set(WITH_PXCAPI FALSE CACHE BOOL "pxcapi: disabled (forced)" FORCE)
+set(WITH_QT FALSE CACHE BOOL "qt: disabled (forced)" FORCE)
+set(WITH_VTK FALSE CACHE BOOL "vtk: disabled (forced)" FORCE)
+set(BUILD_apps FALSE CACHE BOOL "apps: disabled (forced)" FORCE)
+set(BUILD_tools FALSE CACHE BOOL "tools: disabled (forced)" FORCE)
+set(BUILD_tracking FALSE CACHE BOOL "tracking: disabled (forced)" FORCE)
+
+set(HAVE_MM_MALLOC_EXITCODE "2" CACHE STRING "Result from TRY_RUN for HAVE_MM_MALLOC" FORCE)
+set(HAVE_POSIX_MEMALIGN_EXITCODE "2" CACHE STRING "Result from TRY_RUN for HAVE_POSIX_MEMALIGN" FORCE)
+
--- libs/pcl/PCLConfig.cmake.in
+++ libs/pcl/PCLConfig.cmake.in
@@ -853,8 +853,9 @@
       set(PCL_${COMPONENT}_LIBRARY ${PCL_${COMPONENT}_LIBRARY_DEBUG})
     endif(NOT PCL_${COMPONENT}_LIBRARY AND WIN32)
 
+    # Ignore missing headers
     find_package_handle_standard_args(PCL_${COMPONENT} DEFAULT_MSG
-      PCL_${COMPONENT}_LIBRARY PCL_${COMPONENT}_INCLUDE_DIR)
+      PCL_${COMPONENT}_LIBRARY)
   else(_is_header_only EQUAL -1)
     find_package_handle_standard_args(PCL_${COMPONENT} DEFAULT_MSG
       PCL_${COMPONENT}_INCLUDE_DIR)  
@@ -885,6 +886,7 @@
         list(APPEND PCL_${COMPONENT}_INCLUDE_DIRS ${PCL_${INT_DEP}_INCLUDE_DIRS})
         if(PCL_${INT_DEP}_LIBRARIES)
           list(APPEND PCL_${COMPONENT}_LIBRARIES "${PCL_${INT_DEP}_LIBRARIES}")
+          list(APPEND PCL_LIBRARIES "${PCL_${INT_DEP}_LIBRARIES}")
         endif(PCL_${INT_DEP}_LIBRARIES) 
       endif(PCL_${INT_DEP}_FOUND)
     endforeach(int_dep)
--- libs/pcl/cmake/pcl_pclconfig.cmake
+++ libs/pcl/cmake/pcl_pclconfig.cmake
@@ -61,6 +61,13 @@
     endif(_status)
 endforeach(_ss)
 
+# For static builds we need to link to the internal library 'pcl_io_ply' explicitly.
+# ==> We do so by adding io_ply to the list of available components and to pcl_io_int_dep.
+if(NOT PCL_SHARED_LIBS)
+  set(PCLCONFIG_AVAILABLE_COMPONENTS "${PCLCONFIG_AVAILABLE_COMPONENTS} io_ply")
+  set(PCLCONFIG_INTERNAL_DEPENDENCIES "${PCLCONFIG_INTERNAL_DEPENDENCIES}list(APPEND pcl_io_int_dep io_ply)\n")
+endif()
+
 #Boost modules
 set(PCLCONFIG_AVAILABLE_BOOST_MODULES "system filesystem thread date_time iostreams")
 if(Boost_SERIALIZATION_FOUND)
 
